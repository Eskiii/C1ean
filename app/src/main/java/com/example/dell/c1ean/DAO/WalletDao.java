package com.example.dell.c1ean.DAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dell.c1ean.Bean.Wallet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WALLET".
*/
public class WalletDao extends AbstractDao<Wallet, Long> {

    public static final String TABLENAME = "WALLET";

    /**
     * Properties of entity Wallet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, Long.class, "user_id", true, "_id");
        public final static Property Bank_account = new Property(1, String.class, "bank_account", false, "BANK_ACCOUNT");
        public final static Property Alipay_account = new Property(2, String.class, "alipay_account", false, "ALIPAY_ACCOUNT");
        public final static Property Balance = new Property(3, Float.class, "balance", false, "BALANCE");
    }


    public WalletDao(DaoConfig config) {
        super(config);
    }
    
    public WalletDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WALLET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: user_id
                "\"BANK_ACCOUNT\" TEXT," + // 1: bank_account
                "\"ALIPAY_ACCOUNT\" TEXT," + // 2: alipay_account
                "\"BALANCE\" REAL);"); // 3: balance
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WALLET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Wallet entity) {
        stmt.clearBindings();
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
 
        String bank_account = entity.getBank_account();
        if (bank_account != null) {
            stmt.bindString(2, bank_account);
        }
 
        String alipay_account = entity.getAlipay_account();
        if (alipay_account != null) {
            stmt.bindString(3, alipay_account);
        }
 
        Float balance = entity.getBalance();
        if (balance != null) {
            stmt.bindDouble(4, balance);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Wallet entity) {
        stmt.clearBindings();
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
 
        String bank_account = entity.getBank_account();
        if (bank_account != null) {
            stmt.bindString(2, bank_account);
        }
 
        String alipay_account = entity.getAlipay_account();
        if (alipay_account != null) {
            stmt.bindString(3, alipay_account);
        }
 
        Float balance = entity.getBalance();
        if (balance != null) {
            stmt.bindDouble(4, balance);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Wallet readEntity(Cursor cursor, int offset) {
        Wallet entity = new Wallet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bank_account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alipay_account
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3) // balance
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Wallet entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBank_account(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlipay_account(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBalance(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Wallet entity, long rowId) {
        entity.setUser_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Wallet entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Wallet entity) {
        return entity.getUser_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
