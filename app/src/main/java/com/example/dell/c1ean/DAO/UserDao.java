package com.example.dell.c1ean.DAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dell.c1ean.Bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Img = new Property(2, String.class, "img", false, "IMG");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Tel = new Property(4, String.class, "tel", false, "TEL");
        public final static Property Location1 = new Property(5, String.class, "location1", false, "LOCATION1");
        public final static Property Location2 = new Property(6, String.class, "location2", false, "LOCATION2");
        public final static Property Location3 = new Property(7, String.class, "location3", false, "LOCATION3");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IMG\" TEXT," + // 2: img
                "\"PASSWORD\" TEXT NOT NULL ," + // 3: password
                "\"TEL\" TEXT NOT NULL ," + // 4: tel
                "\"LOCATION1\" TEXT," + // 5: location1
                "\"LOCATION2\" TEXT," + // 6: location2
                "\"LOCATION3\" TEXT);"); // 7: location3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
        stmt.bindString(4, entity.getPassword());
        stmt.bindString(5, entity.getTel());
 
        String location1 = entity.getLocation1();
        if (location1 != null) {
            stmt.bindString(6, location1);
        }
 
        String location2 = entity.getLocation2();
        if (location2 != null) {
            stmt.bindString(7, location2);
        }
 
        String location3 = entity.getLocation3();
        if (location3 != null) {
            stmt.bindString(8, location3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
        stmt.bindString(4, entity.getPassword());
        stmt.bindString(5, entity.getTel());
 
        String location1 = entity.getLocation1();
        if (location1 != null) {
            stmt.bindString(6, location1);
        }
 
        String location2 = entity.getLocation2();
        if (location2 != null) {
            stmt.bindString(7, location2);
        }
 
        String location3 = entity.getLocation3();
        if (location3 != null) {
            stmt.bindString(8, location3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // img
            cursor.getString(offset + 3), // password
            cursor.getString(offset + 4), // tel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // location2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // location3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.getString(offset + 3));
        entity.setTel(cursor.getString(offset + 4));
        entity.setLocation1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocation2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLocation3(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
