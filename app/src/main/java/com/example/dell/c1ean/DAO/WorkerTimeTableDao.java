package com.example.dell.c1ean.DAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dell.c1ean.Bean.Worker;

import com.example.dell.c1ean.Bean.WorkerTimeTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORKER_TIME_TABLE".
*/
public class WorkerTimeTableDao extends AbstractDao<WorkerTimeTable, Long> {

    public static final String TABLENAME = "WORKER_TIME_TABLE";

    /**
     * Properties of entity WorkerTimeTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Worker_id = new Property(0, Long.class, "worker_id", true, "_id");
        public final static Property Am8 = new Property(1, boolean.class, "am8", false, "AM8");
        public final static Property Am9 = new Property(2, boolean.class, "am9", false, "AM9");
        public final static Property Am10 = new Property(3, boolean.class, "am10", false, "AM10");
        public final static Property Am11 = new Property(4, boolean.class, "am11", false, "AM11");
        public final static Property Am12 = new Property(5, boolean.class, "am12", false, "AM12");
        public final static Property Pm1 = new Property(6, boolean.class, "pm1", false, "PM1");
        public final static Property Pm2 = new Property(7, boolean.class, "pm2", false, "PM2");
        public final static Property Pm3 = new Property(8, boolean.class, "pm3", false, "PM3");
        public final static Property Pm4 = new Property(9, boolean.class, "pm4", false, "PM4");
        public final static Property Pm5 = new Property(10, boolean.class, "pm5", false, "PM5");
        public final static Property Pm6 = new Property(11, boolean.class, "pm6", false, "PM6");
        public final static Property Pm8 = new Property(12, boolean.class, "pm8", false, "PM8");
        public final static Property Pm9 = new Property(13, boolean.class, "pm9", false, "PM9");
        public final static Property Pm10 = new Property(14, boolean.class, "pm10", false, "PM10");
    }

    private DaoSession daoSession;


    public WorkerTimeTableDao(DaoConfig config) {
        super(config);
    }
    
    public WorkerTimeTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORKER_TIME_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: worker_id
                "\"AM8\" INTEGER NOT NULL ," + // 1: am8
                "\"AM9\" INTEGER NOT NULL ," + // 2: am9
                "\"AM10\" INTEGER NOT NULL ," + // 3: am10
                "\"AM11\" INTEGER NOT NULL ," + // 4: am11
                "\"AM12\" INTEGER NOT NULL ," + // 5: am12
                "\"PM1\" INTEGER NOT NULL ," + // 6: pm1
                "\"PM2\" INTEGER NOT NULL ," + // 7: pm2
                "\"PM3\" INTEGER NOT NULL ," + // 8: pm3
                "\"PM4\" INTEGER NOT NULL ," + // 9: pm4
                "\"PM5\" INTEGER NOT NULL ," + // 10: pm5
                "\"PM6\" INTEGER NOT NULL ," + // 11: pm6
                "\"PM8\" INTEGER NOT NULL ," + // 12: pm8
                "\"PM9\" INTEGER NOT NULL ," + // 13: pm9
                "\"PM10\" INTEGER NOT NULL );"); // 14: pm10
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORKER_TIME_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WorkerTimeTable entity) {
        stmt.clearBindings();
 
        Long worker_id = entity.getWorker_id();
        if (worker_id != null) {
            stmt.bindLong(1, worker_id);
        }
        stmt.bindLong(2, entity.getAm8() ? 1L: 0L);
        stmt.bindLong(3, entity.getAm9() ? 1L: 0L);
        stmt.bindLong(4, entity.getAm10() ? 1L: 0L);
        stmt.bindLong(5, entity.getAm11() ? 1L: 0L);
        stmt.bindLong(6, entity.getAm12() ? 1L: 0L);
        stmt.bindLong(7, entity.getPm1() ? 1L: 0L);
        stmt.bindLong(8, entity.getPm2() ? 1L: 0L);
        stmt.bindLong(9, entity.getPm3() ? 1L: 0L);
        stmt.bindLong(10, entity.getPm4() ? 1L: 0L);
        stmt.bindLong(11, entity.getPm5() ? 1L: 0L);
        stmt.bindLong(12, entity.getPm6() ? 1L: 0L);
        stmt.bindLong(13, entity.getPm8() ? 1L: 0L);
        stmt.bindLong(14, entity.getPm9() ? 1L: 0L);
        stmt.bindLong(15, entity.getPm10() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WorkerTimeTable entity) {
        stmt.clearBindings();
 
        Long worker_id = entity.getWorker_id();
        if (worker_id != null) {
            stmt.bindLong(1, worker_id);
        }
        stmt.bindLong(2, entity.getAm8() ? 1L: 0L);
        stmt.bindLong(3, entity.getAm9() ? 1L: 0L);
        stmt.bindLong(4, entity.getAm10() ? 1L: 0L);
        stmt.bindLong(5, entity.getAm11() ? 1L: 0L);
        stmt.bindLong(6, entity.getAm12() ? 1L: 0L);
        stmt.bindLong(7, entity.getPm1() ? 1L: 0L);
        stmt.bindLong(8, entity.getPm2() ? 1L: 0L);
        stmt.bindLong(9, entity.getPm3() ? 1L: 0L);
        stmt.bindLong(10, entity.getPm4() ? 1L: 0L);
        stmt.bindLong(11, entity.getPm5() ? 1L: 0L);
        stmt.bindLong(12, entity.getPm6() ? 1L: 0L);
        stmt.bindLong(13, entity.getPm8() ? 1L: 0L);
        stmt.bindLong(14, entity.getPm9() ? 1L: 0L);
        stmt.bindLong(15, entity.getPm10() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(WorkerTimeTable entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WorkerTimeTable readEntity(Cursor cursor, int offset) {
        WorkerTimeTable entity = new WorkerTimeTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // worker_id
            cursor.getShort(offset + 1) != 0, // am8
            cursor.getShort(offset + 2) != 0, // am9
            cursor.getShort(offset + 3) != 0, // am10
            cursor.getShort(offset + 4) != 0, // am11
            cursor.getShort(offset + 5) != 0, // am12
            cursor.getShort(offset + 6) != 0, // pm1
            cursor.getShort(offset + 7) != 0, // pm2
            cursor.getShort(offset + 8) != 0, // pm3
            cursor.getShort(offset + 9) != 0, // pm4
            cursor.getShort(offset + 10) != 0, // pm5
            cursor.getShort(offset + 11) != 0, // pm6
            cursor.getShort(offset + 12) != 0, // pm8
            cursor.getShort(offset + 13) != 0, // pm9
            cursor.getShort(offset + 14) != 0 // pm10
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WorkerTimeTable entity, int offset) {
        entity.setWorker_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAm8(cursor.getShort(offset + 1) != 0);
        entity.setAm9(cursor.getShort(offset + 2) != 0);
        entity.setAm10(cursor.getShort(offset + 3) != 0);
        entity.setAm11(cursor.getShort(offset + 4) != 0);
        entity.setAm12(cursor.getShort(offset + 5) != 0);
        entity.setPm1(cursor.getShort(offset + 6) != 0);
        entity.setPm2(cursor.getShort(offset + 7) != 0);
        entity.setPm3(cursor.getShort(offset + 8) != 0);
        entity.setPm4(cursor.getShort(offset + 9) != 0);
        entity.setPm5(cursor.getShort(offset + 10) != 0);
        entity.setPm6(cursor.getShort(offset + 11) != 0);
        entity.setPm8(cursor.getShort(offset + 12) != 0);
        entity.setPm9(cursor.getShort(offset + 13) != 0);
        entity.setPm10(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WorkerTimeTable entity, long rowId) {
        entity.setWorker_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WorkerTimeTable entity) {
        if(entity != null) {
            return entity.getWorker_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WorkerTimeTable entity) {
        return entity.getWorker_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getWorkerDao().getAllColumns());
            builder.append(" FROM WORKER_TIME_TABLE T");
            builder.append(" LEFT JOIN WORKER T0 ON T.\"_id\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected WorkerTimeTable loadCurrentDeep(Cursor cursor, boolean lock) {
        WorkerTimeTable entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Worker worker = loadCurrentOther(daoSession.getWorkerDao(), cursor, offset);
        entity.setWorker(worker);

        return entity;    
    }

    public WorkerTimeTable loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<WorkerTimeTable> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<WorkerTimeTable> list = new ArrayList<WorkerTimeTable>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<WorkerTimeTable> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<WorkerTimeTable> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
