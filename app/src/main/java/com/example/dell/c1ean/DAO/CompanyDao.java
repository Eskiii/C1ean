package com.example.dell.c1ean.DAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dell.c1ean.Bean.Company;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPANY".
*/
public class CompanyDao extends AbstractDao<Company, Long> {

    public static final String TABLENAME = "COMPANY";

    /**
     * Properties of entity Company.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Company_id = new Property(0, Long.class, "company_id", true, "_id");
        public final static Property Img = new Property(1, String.class, "img", false, "IMG");
        public final static Property Company_name = new Property(2, String.class, "company_name", false, "COMPANY_NAME");
        public final static Property Company_code = new Property(3, String.class, "company_code", false, "COMPANY_CODE");
        public final static Property Company_location = new Property(4, String.class, "company_location", false, "COMPANY_LOCATION");
        public final static Property Company_tel = new Property(5, String.class, "company_tel", false, "COMPANY_TEL");
        public final static Property Password = new Property(6, String.class, "password", false, "PASSWORD");
        public final static Property Introduction = new Property(7, String.class, "introduction", false, "INTRODUCTION");
    }


    public CompanyDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPANY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: company_id
                "\"IMG\" TEXT," + // 1: img
                "\"COMPANY_NAME\" TEXT NOT NULL ," + // 2: company_name
                "\"COMPANY_CODE\" TEXT NOT NULL ," + // 3: company_code
                "\"COMPANY_LOCATION\" TEXT NOT NULL ," + // 4: company_location
                "\"COMPANY_TEL\" TEXT NOT NULL ," + // 5: company_tel
                "\"PASSWORD\" TEXT," + // 6: password
                "\"INTRODUCTION\" TEXT);"); // 7: introduction
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPANY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Company entity) {
        stmt.clearBindings();
 
        Long company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindLong(1, company_id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
        stmt.bindString(3, entity.getCompany_name());
        stmt.bindString(4, entity.getCompany_code());
        stmt.bindString(5, entity.getCompany_location());
        stmt.bindString(6, entity.getCompany_tel());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Company entity) {
        stmt.clearBindings();
 
        Long company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindLong(1, company_id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
        stmt.bindString(3, entity.getCompany_name());
        stmt.bindString(4, entity.getCompany_code());
        stmt.bindString(5, entity.getCompany_location());
        stmt.bindString(6, entity.getCompany_tel());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Company readEntity(Cursor cursor, int offset) {
        Company entity = new Company( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // company_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // img
            cursor.getString(offset + 2), // company_name
            cursor.getString(offset + 3), // company_code
            cursor.getString(offset + 4), // company_location
            cursor.getString(offset + 5), // company_tel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // password
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // introduction
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Company entity, int offset) {
        entity.setCompany_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompany_name(cursor.getString(offset + 2));
        entity.setCompany_code(cursor.getString(offset + 3));
        entity.setCompany_location(cursor.getString(offset + 4));
        entity.setCompany_tel(cursor.getString(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntroduction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Company entity, long rowId) {
        entity.setCompany_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Company entity) {
        if(entity != null) {
            return entity.getCompany_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Company entity) {
        return entity.getCompany_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
