package com.example.dell.c1ean.DAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dell.c1ean.Bean.Company;

import com.example.dell.c1ean.Bean.Worker;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORKER".
*/
public class WorkerDao extends AbstractDao<Worker, Long> {

    public static final String TABLENAME = "WORKER";

    /**
     * Properties of entity Worker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Worker_id = new Property(0, long.class, "worker_id", true, "_id");
        public final static Property Worker_name = new Property(1, String.class, "worker_name", false, "WORKER_NAME");
        public final static Property Img = new Property(2, String.class, "img", false, "IMG");
        public final static Property Worker_type = new Property(3, String.class, "worker_type", false, "WORKER_TYPE");
        public final static Property Worker_tel = new Property(4, String.class, "worker_tel", false, "WORKER_TEL");
        public final static Property Company_id = new Property(5, long.class, "company_id", false, "COMPANY_ID");
        public final static Property Password = new Property(6, String.class, "password", false, "PASSWORD");
        public final static Property Introduction = new Property(7, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Star = new Property(8, String.class, "star", false, "STAR");
    }

    private DaoSession daoSession;


    public WorkerDao(DaoConfig config) {
        super(config);
    }
    
    public WorkerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORKER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: worker_id
                "\"WORKER_NAME\" TEXT NOT NULL ," + // 1: worker_name
                "\"IMG\" TEXT," + // 2: img
                "\"WORKER_TYPE\" TEXT NOT NULL ," + // 3: worker_type
                "\"WORKER_TEL\" TEXT NOT NULL ," + // 4: worker_tel
                "\"COMPANY_ID\" INTEGER NOT NULL ," + // 5: company_id
                "\"PASSWORD\" TEXT," + // 6: password
                "\"INTRODUCTION\" TEXT," + // 7: introduction
                "\"STAR\" TEXT);"); // 8: star
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORKER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Worker entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWorker_id());
        stmt.bindString(2, entity.getWorker_name());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
        stmt.bindString(4, entity.getWorker_type());
        stmt.bindString(5, entity.getWorker_tel());
        stmt.bindLong(6, entity.getCompany_id());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
 
        String star = entity.getStar();
        if (star != null) {
            stmt.bindString(9, star);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Worker entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWorker_id());
        stmt.bindString(2, entity.getWorker_name());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
        stmt.bindString(4, entity.getWorker_type());
        stmt.bindString(5, entity.getWorker_tel());
        stmt.bindLong(6, entity.getCompany_id());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
 
        String star = entity.getStar();
        if (star != null) {
            stmt.bindString(9, star);
        }
    }

    @Override
    protected final void attachEntity(Worker entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Worker readEntity(Cursor cursor, int offset) {
        Worker entity = new Worker( //
            cursor.getLong(offset + 0), // worker_id
            cursor.getString(offset + 1), // worker_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // img
            cursor.getString(offset + 3), // worker_type
            cursor.getString(offset + 4), // worker_tel
            cursor.getLong(offset + 5), // company_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // password
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // introduction
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // star
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Worker entity, int offset) {
        entity.setWorker_id(cursor.getLong(offset + 0));
        entity.setWorker_name(cursor.getString(offset + 1));
        entity.setImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWorker_type(cursor.getString(offset + 3));
        entity.setWorker_tel(cursor.getString(offset + 4));
        entity.setCompany_id(cursor.getLong(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntroduction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Worker entity, long rowId) {
        entity.setWorker_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Worker entity) {
        if(entity != null) {
            return entity.getWorker_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Worker entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCompanyDao().getAllColumns());
            builder.append(" FROM WORKER T");
            builder.append(" LEFT JOIN COMPANY T0 ON T.\"COMPANY_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Worker loadCurrentDeep(Cursor cursor, boolean lock) {
        Worker entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Company company = loadCurrentOther(daoSession.getCompanyDao(), cursor, offset);
         if(company != null) {
            entity.setCompany(company);
        }

        return entity;    
    }

    public Worker loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Worker> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Worker> list = new ArrayList<Worker>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Worker> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Worker> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
